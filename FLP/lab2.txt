1.
(defun double-list (lst)
(if (null lst)
nil
(cons (car lst)
(cons (car lst)
(double-list (cdr lst))))))
(print (double-list '(8 a 4 b)))
2.
(defun pair-elements (lst)
(labels ((helper (front back count len)
(if (>= count (/ len 2))
nil
(cons (list (car front) (car (last back)))
(helper (cdr front) (butlast back) (+ count 1) len)))))
(helper lst lst 0 (length lst))))
(print(pair-elements '(1 b 3 f)))
3.
(defun remove-by-index (lst idx-list &optional (current-index 1))
(cond ((null lst) nil)
((and (not (null idx-list)) (= current-index (car idx-list)))
(remove-by-index (cdr lst) (cdr idx-list) (+ current-index 1)))
(t
(cons (car lst) (remove-by-index (cdr lst) idx-list (+ current-index 1))))))
(print(remove-by-index '(a s d f) '(1 3)))
